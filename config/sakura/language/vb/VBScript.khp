;--------------------------------------------------------------------
;VBScript用キーワード・ヘルプ		by Shimizu	2005年2月19日
;--------------------------------------------------------------------

;//////////////////////////////////////
;//		ステートメント

;<<宣言>>
Dim /// 変数を宣言する
Const /// 定数を宣言する
Private /// プライベート変数を宣言する
Public /// パブリック変数を宣言する
Sub /// サブルーチンを定義する
Function /// 関数を定義する
Class /// クラスを定義する
Property Get /// クラスのプロパティ値を取得する
Property Let /// クラスのプロパティ値を設定する
Property Set /// クラスのオブジェクトへの参照を設定する 
ReDim /// 動的配列変数を宣言する

;<<制御構文>>
For,Next /// 指定された回数だけ処理を繰り返す
Do,Loop /// 条件によって処理を繰り返す
While,Wend /// 条件がTrue(真)である間、処理を繰り返す
For Each,Next /// 配列やコレクションの全ての要素に対して処理を繰り返す
Exit /// ループやプロシージャを抜け出す
If,Then,Else /// 条件によって処理を分岐させる
Select Case /// 条件によって処理を分岐させる
Call /// Sub プロシージャおよび Function プロシージャに制御を渡す 
With /// 1 つのオブジェクトに対して一連の処理を実行する

;<<その他のステートメント>>
Erase /// 静的配列の要素を再初期化したり、動的配列に割り当てたメモリを解放する 
Execute /// 文字列を式と評価して実行する
ExecuteGlobal /// グローバル名前空間で 1 つ以上のステートメントを実行する
On Error /// エラー処理を有効または無効にする
Option Explicit /// スクリプト内のすべての変数に対して、明示的な宣言を強制する
Randomize /// 乱数ジェネレータを初期化する
Rem /// コメントを記述する
Set /// オブジェクトへの参照を変数またはプロパティに代入する


;//////////////////////////////////////
;//		関数

;<<数値演算>>
Int /// Int( 数値または数式 )\n小数点以下を切り捨て、整数部分を返す
Fix /// Fix( 数値または数式 )\n小数点以下を切り捨て、整数部分を返す
Round /// Round( 数値または数式[, 小数点の位置 ] )\n指定した位置以下の少数部分を四捨五入する 
Sgn /// Sgn( 数値または数式 )\n数値の符号を返す
Abs /// Abs( 数値または数式 )\n数値の絶対値を返す
Log /// Log( 数値または数式 )\n自然対数を求める
Exp /// Exp( 数値または数式 )\ne を底とする数式のべき乗を求める
Sqr /// Sqr( 数値または数式 )\n数値の平方根を求める
Sin /// Sin( 数値または数式 )\nサインを返す
Cos /// Cos( 数値または数式 )\nコサインを返す
Tan /// Tan( 数値または数式 )\nタンジェントを返す
Atn /// Atn( 数値または数式 )\nアークタンジェントを返す
Oct /// Oct( 数値または数式 )\n数値を８進数に変換する
Hex /// Hex( 数値または数式 )\n数値を１６進数に変換する
Rnd /// Rnd[( 数値または数式 )]\n0 以上、1 未満の乱数を返す

;<<文字列処理>>
FormatCurrency /// FormatCurrency( 書式を変換する式[, 小数点以下の桁数][, 小数点の左側の 0 を表示するか][, 負の値を括弧で囲むか][, 区切り記号を使用するか] )\n式を通貨形式に変換する
FormatDateTime /// FormatDateTime( 書式を変換する式[, 日付や時刻の形式])\n式を日付、時刻形式に変換する
FormatNumber /// FormatNumber( 書式を変換する式[, 小数点以下の桁数][, 小数点の左側の 0 を表示するか][, 負の値を括弧で囲むか][, 区切り記号を使用するか] )\n式を数値形式に変換する
FormatPercent /// FormatPercent( 書式を変換する式[, 小数点以下の桁数][, 小数点の左側の 0 を表示するか][, 負の値を括弧で囲むか][, 区切り記号を使用するか] )\n式をパーセント形式に変換する
LCase /// LCase( 文字列 )\n大文字を小文字に変換する
UCase /// UCase( 文字列 )\n小文字を大文字に変換する
LTrim /// LTrim( 文字列 )\n先頭のスペースを除く
RTrim /// RTrim( 文字列 )\n末尾のスペースを除く
Trim /// Trim( 文字列 )\n先頭と末尾のスペースを除く
Left /// Left( 文字列, 取り出す文字数 )\n左端から指定された文字数分を抜き出す
Right /// Right( 文字列, 取り出す文字数 )\n右端から指定された文字数分を抜き出す
Mid /// Mid( 文字列, 開始位置[, 取り出す文字数])\n指定した位置から指定した文字数分を抜き出す 
Len /// Len( 文字列 )\n文字列の長さを返す
StrReverse /// StrReverse( 文字列 )\n文字列を逆から並び替える
Space /// Space( スペースの数 )\n指定した数のスペースを並べる
String /// String( 並べる数 , 文字コード | 文字列 )\n指定された文字を指定された回数だけ並べる
InStr /// InStr( [開始位置, ]対象文字列, 検索文字列[, 比較モード] )\n文字列を検索する
InStrRev /// InStrRev( 対象文字列, 検索文字列[, 開始位置][, 比較モード ] )\n文字列を後ろから検索する
Replace /// Replace( 対象文字列, 検索文字列, 置換文字列[, 先頭位置][, 置換回数][, 比較モード] )\n文字列の一部を置換する
StrComp /// StrComp( 文字列１, 文字列２[, 比較モード] )\n文字列を比較する
Eval /// [ 変数 = ]Eval( 式を表す文字列 )\n文字列を式として評価して、結果を返す

;<<配列>>
Array /// 配列名 = Array( 配列リスト )\nArray( 要素のインデックス番号 )\n配列を作る
Filter /// Filter( 検索先の1次元配列, 検索文字列[, 検索文字列を含むかどうか][, 比較モード] )\n配列から条件に一致する文字列を抜き出す
Join /// Join( 配列名[, 連結文字列] )\n配列を結合する
Split /// 配列名 = Split( 文字列[, 区切り文字][, 返す配列の要素数][, 比較モード] )\n区切り文字を含んだ文字列から配列を作る
LBound /// LBound( 配列名[, 次元] )\n配列で使用できるインデックス番号の最小値を返す 
UBound /// UBound( 配列名[, 次元] )\n配列で使用できるインデックス番号の最大値を返す 

;<<日付と時刻>>
Now /// 現在の日付、時刻
Date /// 現在の日付
Time /// 現在に時刻
Year /// Year( 日付を表す式 )\n日付の年の部分
Month /// Month( 日付を表す式 )\n日付の月の部分
Day /// Day( 日付を表す式 )\n日付の日の部分
MonthName /// MonthName( 月を表す数値[, 短縮表記指定] )\n月を表す文字列を返す
Weekday /// Weekday( 日付を表す式[, 週の１日目を表す定数] )\n曜日を表す整数値を返す
WeekdayName /// WeekdayName( 曜日を表す数値[, 「曜日」を省略するか][, 週の１日目を表す定数] )\n曜日を表す文字列を返す
Hour /// Hour( 日付を表す式 )\n時刻の時の部分
Minute /// Minute( 日付を表す式 )\n時刻の分の部分
Second /// Second( 日付を表す式 )\n時刻の秒の部分
Timer /// 午前０時０分０秒から何秒経過したかを返す
DatePart /// DatePart( 時間間隔の単位, 日時を表す式[, 週の1日目を表す定数][, 年の1週目を表す定数] )\n日時の一部分を返す
DateAdd /// DateAdd( 時間間隔の単位, 追加する時間間隔, 日時を表す式 )\n日付や時間を加算する
DateDiff /// DateDiff( 時間間隔の単位, 日時を表す式 1, 日時を表す式 2[, 週の1日目を表す定数][, 年の1週目を表す定数] )\n二つの日付や時刻の間隔を計算する
DateSerial /// DateSerial( 年, 月, 日 )\n引数に指定された年、月、日をもとに、日付型の値を返す 
DateValue /// DateValue( 日付を表す文字列式 )\n日付を表す文字列を日付型の値に変換する
TimeSerial /// TimeSerial( 時, 分, 秒 )\n引数に指定された時、分、秒をもとに、時刻を返す
TimeValue /// TimeValue( 時刻を表す文字列式 )\n時刻を表す文字列を日付型の時刻に変換する

;<<変換>>
Asc /// Asc( 文字列 )\n文字の ANSI コード、または、シフトJIS コードを返す 
Chr /// Chr( 文字コード )\n指定した文字コードに対応する文字を返す
CInt /// CInt( 式 )\n式の整数型の値を返す
CLng /// CLng( 式 )\n式の長整数型の値を返す
CSng /// CSng( 式 )\n式の単精度浮動小数点数型の値を返す
CDbl /// CDbl( 式 )\n式の倍精度浮動小数点数型の値を返す
CCur /// CCur( 式 )\n式の通貨型の値を返す
CDate /// CDate( 式 )\n式の日付型の値を返す
CByte /// CByte( 式 )\n式のバイト型の値を返す
CBool /// CBool( 式 )\n式のブール型の値を返す
CStr /// CStr( 式 )\n式の文字列型の値を返す

;<<変数情報>>
IsArray /// IsArray( 変数 )\n式が配列であるかどうかを調べる
IsDate /// IsDate( 日付式または文字列式 )\n式が日付に変更できるかどうかを調べる
IsEmpty /// IsEmpty( 変数 )\n変数が Empty かどうかを調べる
IsNull /// IsNull( 式 )\n式が Null かどうかを調べる
IsNumeric /// IsNumeric( 式 )\n式を数値として評価できるかどうかを調べる
IsObject /// IsObject( 式 )\n式がオートメーションオブジェクトを参照しているかどうかを調べる 
TypeName /// TypeName( 変数 )\n変数の種類を返す
VarType /// VarType( 変数 )\n変数の内部処理形式を示す値を返す

;<<オートメーション オブジェクト>>
CreateObject /// Set 変数 = CreateObject( "アプリケーション名 . クラス名[, ロケーション]" )\nオートメーション オブジェクトを作成する
GetObject /// Set 変数 = GetObject( "ファイルのパス[, アプリケーション名 . クラス名]" )\nファイルから取得したオートメーション オブジェクトへの参照を返す 

;<<その他の関数>>
InputBox /// 変数 = InputBox( メッセージ[, タイトル][, 初期入力値][, 画面左端からの距離][, 画面上端からの距離][, ヘルプファイル名][, コンテキスト番号] )\n文字入力ダイアログボックスを表示する
MsgBox /// MsgBox メッセージ[, ボタンの種類や個数][, タイトル][, ヘルプファイル名][, コンテキスト番号]\n変数 = MsgBox( メッセージ][, ボタンの種類や個数][, タイトル][, ヘルプファイル名][, コンテキスト番号 ] )\nメッセージダイアログボックスを表示する
ScriptEngine /// 使用中のスクリプトエンジンを表す文字列を返す
ScriptEngineMajorVersion /// スクリプトエンジンのメジャーバージョン番号を返す
ScriptEngineMinorVersion /// スクリプトエンジンのマイナーバージョン番号を返す
ScriptEngineBuildVersion /// スクリプトエンジンのビルドバージョン番号を返す
GetLocale /// GetLocale()\n現在のロケール ID の値を返す
SetLocale /// SetLocale( ロケール情報 )\nロケール設定を行う
GetRef /// Set オブジェクト名 . イベント名 = GetRef( プロシージャ名 )\nイベントとバインドできるプロシージャに対する参照を返す 
LoadPicture /// LoadPicture( ファイルのパス )\n指定したパスのピクチャ オブジェクトを返す
RGB /// RGB( 赤の成分, 緑の成分, 青の成分 )\nRGB カラー値を表す値を返す

